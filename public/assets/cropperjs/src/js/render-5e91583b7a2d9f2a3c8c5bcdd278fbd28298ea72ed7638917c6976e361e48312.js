import{ACTION_ALL,ACTION_MOVE,CLASS_HIDDEN,DATA_ACTION,EVENT_CROP}from"./constants";import{addClass,assign,dispatchEvent,getAdjustedSizes,getRotatedSizes,getTransforms,removeClass,setData,setStyle}from"./utilities";export default{render(){this.initContainer(),this.initCanvas(),this.initCropBox(),this.renderCanvas(),this.cropped&&this.renderCropBox()},initContainer(){const{element:t,options:i,container:h,cropper:a}=this;addClass(a,CLASS_HIDDEN),removeClass(t,CLASS_HIDDEN);const e={width:Math.max(h.offsetWidth,Number(i.minContainerWidth)||200),height:Math.max(h.offsetHeight,Number(i.minContainerHeight)||100)};this.containerData=e,setStyle(a,{width:e.width,height:e.height}),addClass(t,CLASS_HIDDEN),removeClass(a,CLASS_HIDDEN)},initCanvas(){const{containerData:t,imageData:i}=this,{viewMode:h}=this.options,a=Math.abs(i.rotate)%180==90,e=a?i.naturalHeight:i.naturalWidth,n=a?i.naturalWidth:i.naturalHeight,o=e/n;let s=t.width,m=t.height;t.height*o>t.width?3===h?s=t.height*o:m=t.width/o:3===h?m=t.width/o:s=t.height*o;const d={aspectRatio:o,naturalWidth:e,naturalHeight:n,width:s,height:m};d.left=(t.width-s)/2,d.top=(t.height-m)/2,d.oldLeft=d.left,d.oldTop=d.top,this.canvasData=d,this.limited=1===h||2===h,this.limitCanvas(!0,!0),this.initialImageData=assign({},i),this.initialCanvasData=assign({},d)},limitCanvas(t,i){const{options:h,containerData:a,canvasData:e,cropBoxData:n}=this,{viewMode:o}=h,{aspectRatio:s}=e,m=this.cropped&&n;if(t){let t=Number(h.minCanvasWidth)||0,i=Number(h.minCanvasHeight)||0;o>1?(t=Math.max(t,a.width),i=Math.max(i,a.height),3===o&&(i*s>t?t=i*s:i=t/s)):o>0&&(t?t=Math.max(t,m?n.width:0):i?i=Math.max(i,m?n.height:0):m&&(t=n.width,(i=n.height)*s>t?t=i*s:i=t/s)),({width:t,height:i}=getAdjustedSizes({aspectRatio:s,width:t,height:i})),e.minWidth=t,e.minHeight=i,e.maxWidth=Infinity,e.maxHeight=Infinity}if(i)if(o>(m?0:1)){const t=a.width-e.width,i=a.height-e.height;e.minLeft=Math.min(0,t),e.minTop=Math.min(0,i),e.maxLeft=Math.max(0,t),e.maxTop=Math.max(0,i),m&&this.limited&&(e.minLeft=Math.min(n.left,n.left+(n.width-e.width)),e.minTop=Math.min(n.top,n.top+(n.height-e.height)),e.maxLeft=n.left,e.maxTop=n.top,2===o&&(e.width>=a.width&&(e.minLeft=Math.min(0,t),e.maxLeft=Math.max(0,t)),e.height>=a.height&&(e.minTop=Math.min(0,i),e.maxTop=Math.max(0,i))))}else e.minLeft=-e.width,e.minTop=-e.height,e.maxLeft=a.width,e.maxTop=a.height},renderCanvas(t,i){const{canvasData:h,imageData:a}=this;if(i){const{width:t,height:i}=getRotatedSizes({width:a.naturalWidth*Math.abs(a.scaleX||1),height:a.naturalHeight*Math.abs(a.scaleY||1),degree:a.rotate||0}),e=h.width*(t/h.naturalWidth),n=h.height*(i/h.naturalHeight);h.left-=(e-h.width)/2,h.top-=(n-h.height)/2,h.width=e,h.height=n,h.aspectRatio=t/i,h.naturalWidth=t,h.naturalHeight=i,this.limitCanvas(!0,!1)}(h.width>h.maxWidth||h.width<h.minWidth)&&(h.left=h.oldLeft),(h.height>h.maxHeight||h.height<h.minHeight)&&(h.top=h.oldTop),h.width=Math.min(Math.max(h.width,h.minWidth),h.maxWidth),h.height=Math.min(Math.max(h.height,h.minHeight),h.maxHeight),this.limitCanvas(!1,!0),h.left=Math.min(Math.max(h.left,h.minLeft),h.maxLeft),h.top=Math.min(Math.max(h.top,h.minTop),h.maxTop),h.oldLeft=h.left,h.oldTop=h.top,setStyle(this.canvas,assign({width:h.width,height:h.height},getTransforms({translateX:h.left,translateY:h.top}))),this.renderImage(t),this.cropped&&this.limited&&this.limitCropBox(!0,!0)},renderImage(t){const{canvasData:i,imageData:h}=this,a=h.naturalWidth*(i.width/i.naturalWidth),e=h.naturalHeight*(i.height/i.naturalHeight);assign(h,{width:a,height:e,left:(i.width-a)/2,top:(i.height-e)/2}),setStyle(this.image,assign({width:h.width,height:h.height},getTransforms(assign({translateX:h.left,translateY:h.top},h)))),t&&this.output()},initCropBox(){const{options:t,canvasData:i}=this,h=t.aspectRatio||t.initialAspectRatio,a=Number(t.autoCropArea)||.8,e={width:i.width,height:i.height};h&&(i.height*h>i.width?e.height=e.width/h:e.width=e.height*h),this.cropBoxData=e,this.limitCropBox(!0,!0),e.width=Math.min(Math.max(e.width,e.minWidth),e.maxWidth),e.height=Math.min(Math.max(e.height,e.minHeight),e.maxHeight),e.width=Math.max(e.minWidth,e.width*a),e.height=Math.max(e.minHeight,e.height*a),e.left=i.left+(i.width-e.width)/2,e.top=i.top+(i.height-e.height)/2,e.oldLeft=e.left,e.oldTop=e.top,this.initialCropBoxData=assign({},e)},limitCropBox(t,i){const{options:h,containerData:a,canvasData:e,cropBoxData:n,limited:o}=this,{aspectRatio:s}=h;if(t){let t=Number(h.minCropBoxWidth)||0,i=Number(h.minCropBoxHeight)||0,m=o?Math.min(a.width,e.width,e.width+e.left,a.width-e.left):a.width,d=o?Math.min(a.height,e.height,e.height+e.top,a.height-e.top):a.height;t=Math.min(t,a.width),i=Math.min(i,a.height),s&&(t&&i?i*s>t?i=t/s:t=i*s:t?i=t/s:i&&(t=i*s),d*s>m?d=m/s:m=d*s),n.minWidth=Math.min(t,m),n.minHeight=Math.min(i,d),n.maxWidth=m,n.maxHeight=d}i&&(o?(n.minLeft=Math.max(0,e.left),n.minTop=Math.max(0,e.top),n.maxLeft=Math.min(a.width,e.left+e.width)-n.width,n.maxTop=Math.min(a.height,e.top+e.height)-n.height):(n.minLeft=0,n.minTop=0,n.maxLeft=a.width-n.width,n.maxTop=a.height-n.height))},renderCropBox(){const{options:t,containerData:i,cropBoxData:h}=this;(h.width>h.maxWidth||h.width<h.minWidth)&&(h.left=h.oldLeft),(h.height>h.maxHeight||h.height<h.minHeight)&&(h.top=h.oldTop),h.width=Math.min(Math.max(h.width,h.minWidth),h.maxWidth),h.height=Math.min(Math.max(h.height,h.minHeight),h.maxHeight),this.limitCropBox(!1,!0),h.left=Math.min(Math.max(h.left,h.minLeft),h.maxLeft),h.top=Math.min(Math.max(h.top,h.minTop),h.maxTop),h.oldLeft=h.left,h.oldTop=h.top,t.movable&&t.cropBoxMovable&&setData(this.face,DATA_ACTION,h.width>=i.width&&h.height>=i.height?ACTION_MOVE:ACTION_ALL),setStyle(this.cropBox,assign({width:h.width,height:h.height},getTransforms({translateX:h.left,translateY:h.top}))),this.cropped&&this.limited&&this.limitCanvas(!0,!0),this.disabled||this.output()},output(){this.preview(),dispatchEvent(this.element,EVENT_CROP,this.getData())}};