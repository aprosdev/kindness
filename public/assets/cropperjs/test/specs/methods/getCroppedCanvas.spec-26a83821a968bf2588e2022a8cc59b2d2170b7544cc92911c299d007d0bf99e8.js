describe("getCroppedCanvas (method)",()=>{it("should get a canvas with the whole image drew when it is not cropped",e=>{const t=window.createImage(),a=new Cropper(t,{autoCrop:!1,ready(){const t=a.getCanvasData(),o=a.getCroppedCanvas();expect(o).to.be.an["instanceof"](HTMLCanvasElement),expect(o.width).to.equal(t.naturalWidth),expect(o.height).to.equal(t.naturalHeight),e()}})}),it("should get a canvas with the cropped area of the image drew",e=>{const t=window.createImage(),a=new Cropper(t,{ready(){const t=a.getData(),o=a.getCroppedCanvas();expect(o).to.be.an["instanceof"](HTMLCanvasElement),expect(o.width).to.equal(t.width),expect(o.height).to.equal(t.height),e()}})}),it("should match the given width",e=>{const t=window.createImage(),a=new Cropper(t,{ready(){const t=160,o=a.getCroppedCanvas({width:t});expect(o.width).to.equal(t),e()}})}),it("should match the given height",e=>{const t=window.createImage(),a=new Cropper(t,{ready(){const t=90,o=a.getCroppedCanvas({height:t});expect(o.height).to.equal(t),e()}})}),it("should be contained when both width and height are given",e=>{const t=window.createImage(),a=new Cropper(t,{ready(){const t=160,o=90,n=a.getCroppedCanvas({width:t,height:o});expect(n.width).to.be.most(t),expect(n.height).to.be.most(o),e()}})}),it("should not be greater than the maximum width",e=>{const t=window.createImage(),a=new Cropper(t,{ready(){const t=160,o=a.getCroppedCanvas({maxWidth:t});expect(o.width).to.be.most(t),e()}})}),it("should not be greater than the maximum height",e=>{const t=window.createImage(),a=new Cropper(t,{ready(){const t=90,o=a.getCroppedCanvas({maxHeight:t});expect(o.height).to.be.most(t),e()}})}),it("should not be greater than both the maximum width and maximum height",e=>{const t=window.createImage(),a=new Cropper(t,{ready(){const t=160,o=90,n=a.getCroppedCanvas({maxWidth:t,maxHeight:o});expect(n.width).to.be.most(t),expect(n.height).to.be.most(o),e()}})}),it("should not be less than the minimum width",e=>{const t=window.createImage(),a=new Cropper(t,{ready(){const t=1600,o=a.getCroppedCanvas({minWidth:t});expect(o.width).to.be.least(t),e()}})}),it("should not be less than the minimum height",e=>{const t=window.createImage(),a=new Cropper(t,{ready(){const t=900,o=a.getCroppedCanvas({minHeight:t});expect(o.height).to.be.least(t),e()}})}),it("should not be less than both the minimum width and minimum height",e=>{const t=window.createImage(),a=new Cropper(t,{ready(){const t=1600,o=900,n=a.getCroppedCanvas({minWidth:t,minHeight:o});expect(n.width).to.be.least(t),expect(n.height).to.be.least(o),e()}})}),it("should match the given fill color",e=>{const t=window.createImage(),a=new Cropper(t,{ready(){const t=a.zoomTo(.1).getCroppedCanvas({fillColor:"#010101"}).getContext("2d").getImageData(0,0,1,1).data;expect(t[0]).to.equal(1,"red is 1"),expect(t[1]).to.equal(1,"green is 1"),expect(t[2]).to.equal(1,"blue is 1"),expect(t[3]).to.equal(255,"color is opaque"),e()}})})});