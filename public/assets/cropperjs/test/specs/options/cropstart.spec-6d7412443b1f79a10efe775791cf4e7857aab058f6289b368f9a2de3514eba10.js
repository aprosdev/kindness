describe("cropstart (option)",()=>{const e=window.PointerEvent?"pointerdown":"mousedown",t=window.PointerEvent?"pointermove":"mousemove",o=window.PointerEvent?"pointerup":"mouseup";it("should be `null` be default",()=>{const e=window.createImage(),t=new Cropper(e);expect(t.options.cropstart).to.be["null"]}),it("should execute the `cropstart` hook function",n=>{const a=window.createImage(),c=new Cropper(a,{ready(){const{dragBox:n}=c;n.dispatchEvent(window.createEvent(e)),n.dispatchEvent(window.createEvent(t)),n.dispatchEvent(window.createEvent(o))},cropstart(t){expect(t.type).to.equal("cropstart"),expect(t.detail).to.be.an("object").that.has.all.keys(["action","originalEvent"]),expect(t.detail.action).to.equal("crop"),expect(t.detail.originalEvent.type).to.equal(e),n()}});expect(c.options.cropstart).to.be.a("function")}),it("should not execute the `cropmove` and `cropend` callback function when default prevented",n=>{const a=window.createImage(),c=new Cropper(a,{ready(){const{dragBox:n}=c;n.dispatchEvent(window.createEvent(e)),n.dispatchEvent(window.createEvent(t)),n.dispatchEvent(window.createEvent(o))},cropstart(e){e.preventDefault(),n()},cropmove(){expect.fail(1,0)},cropend(){expect.fail(1,0)}})})});