describe("cropstart (event)",()=>{const e=window.PointerEvent?"pointerdown":"mousedown",t=window.PointerEvent?"pointermove":"mousemove",n=window.PointerEvent?"pointerup":"mouseup";it("should trigger the `cropstart` event",o=>{const r=window.createImage();let a;r.addEventListener("ready",()=>{const{dragBox:o}=a;o.dispatchEvent(window.createEvent(e)),o.dispatchEvent(window.createEvent(t)),o.dispatchEvent(window.createEvent(n))}),r.addEventListener("cropstart",e=>{expect(e.type).to.equal("cropstart"),o()}),a=new Cropper(r)}),it("should have expected properties in `event.detail`",o=>{const r=window.createImage();let a;r.addEventListener("ready",()=>{const{dragBox:o}=a;o.dispatchEvent(window.createEvent(e)),o.dispatchEvent(window.createEvent(t)),o.dispatchEvent(window.createEvent(n))}),r.addEventListener("cropstart",t=>{expect(t.detail).to.be.an("object").that.has.all.keys(["action","originalEvent"]),expect(t.detail.action).to.equal("crop"),expect(t.detail.originalEvent.type).to.equal(e),o()}),a=new Cropper(r)}),it("should not trigger the `cropmove` and `cropend` events when default prevented",o=>{const r=window.createImage();let a;r.addEventListener("ready",()=>{const{dragBox:o}=a;o.dispatchEvent(window.createEvent(e)),o.dispatchEvent(window.createEvent(t)),o.dispatchEvent(window.createEvent(n))}),r.addEventListener("cropstart",e=>{e.preventDefault(),o()}),r.addEventListener("cropmove",()=>{expect.fail(1,0)}),r.addEventListener("cropend",()=>{expect.fail(1,0)}),a=new Cropper(r)})});